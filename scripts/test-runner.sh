#!/bin/bash

# üß™ Script de Teste Automatizado - Arm√°rio Inteligente
# Autor: Sistema Arm√°rio Inteligente
# Vers√£o: 1.0

set -e  # Parar execu√ß√£o em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
BASE_URL="http://localhost:8080"
API_URL="$BASE_URL/api/v1"
HEALTH_URL="$BASE_URL/actuator/health"

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fun√ß√£o para verificar se a aplica√ß√£o est√° rodando
check_application() {
    print_message $BLUE "üîç Verificando se a aplica√ß√£o est√° rodando..."
    
    if curl -f -s $HEALTH_URL > /dev/null; then
        print_message $GREEN "‚úÖ Aplica√ß√£o est√° rodando em $BASE_URL"
        return 0
    else
        print_message $RED "‚ùå Aplica√ß√£o n√£o est√° rodando em $BASE_URL"
        print_message $YELLOW "üí° Execute: ./mvnw spring-boot:run"
        exit 1
    fi
}

# Fun√ß√£o para obter token de autentica√ß√£o
get_auth_token() {
    print_message $BLUE "üîê Obtendo token de autentica√ß√£o..."
    
    local response=$(curl -s -X POST "$API_URL/auth/login" \
        -H "Content-Type: application/json" \
        -d '{"email":"admin@smartlocker.com","senha":"admin123"}')
    
    if echo "$response" | grep -q "token"; then
        TOKEN=$(echo "$response" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
        print_message $GREEN "‚úÖ Token obtido com sucesso"
        return 0
    else
        print_message $RED "‚ùå Falha ao obter token"
        echo "Resposta: $response"
        exit 1
    fi
}

# Fun√ß√£o para testar endpoint
test_endpoint() {
    local method=$1
    local endpoint=$2
    local description=$3
    local data=$4
    local expected_status=${5:-200}
    
    print_message $BLUE "üß™ Testando: $description"
    
    local curl_cmd="curl -s -w '%{http_code}' -X $method '$API_URL$endpoint'"
    
    if [ "$method" != "GET" ] && [ -n "$data" ]; then
        curl_cmd="$curl_cmd -H 'Content-Type: application/json' -d '$data'"
    fi
    
    if [ -n "$TOKEN" ]; then
        curl_cmd="$curl_cmd -H 'Authorization: Bearer $TOKEN'"
    fi
    
    local response=$(eval $curl_cmd)
    local status_code="${response: -3}"
    local body="${response%???}"
    
    if [ "$status_code" = "$expected_status" ]; then
        print_message $GREEN "   ‚úÖ $method $endpoint - Status: $status_code"
        return 0
    else
        print_message $RED "   ‚ùå $method $endpoint - Esperado: $expected_status, Recebido: $status_code"
        if [ -n "$body" ]; then
            echo "   Resposta: $body"
        fi
        return 1
    fi
}

# Fun√ß√£o para executar testes de autentica√ß√£o
test_authentication() {
    print_message $YELLOW "üîê === TESTES DE AUTENTICA√á√ÉO ==="
    
    # Teste de login v√°lido
    test_endpoint "POST" "/auth/login" "Login com credenciais v√°lidas" \
        '{"email":"admin@smartlocker.com","senha":"admin123"}' 200
    
    # Teste de login inv√°lido
    test_endpoint "POST" "/auth/login" "Login com credenciais inv√°lidas" \
        '{"email":"usuario@inexistente.com","senha":"senhaerrada"}' 401
}

# Fun√ß√£o para executar testes de usu√°rios
test_usuarios() {
    print_message $YELLOW "üë• === TESTES DE USU√ÅRIOS ==="
    
    # Listar usu√°rios
    test_endpoint "GET" "/usuarios" "Listar todos os usu√°rios"
    
    # Buscar usu√°rio por ID
    test_endpoint "GET" "/usuarios/1" "Buscar usu√°rio por ID"
    
    # Criar novo usu√°rio
    test_endpoint "POST" "/usuarios" "Criar novo usu√°rio" \
        '{"nome":"Teste Script","email":"teste.script@exemplo.com","senha":"senha123","telefone":"(81)99999-9999","tipoUsuarioId":2}'
    
    # Listar usu√°rios ativos
    test_endpoint "GET" "/usuarios/ativos" "Listar usu√°rios ativos"
}

# Fun√ß√£o para executar testes de condom√≠nios
test_condominios() {
    print_message $YELLOW "üè¢ === TESTES DE CONDOM√çNIOS ==="
    
    # Listar condom√≠nios
    test_endpoint "GET" "/condominios" "Listar todos os condom√≠nios"
    
    # Buscar condom√≠nio por ID
    test_endpoint "GET" "/condominios/1" "Buscar condom√≠nio por ID"
    
    # Criar novo condom√≠nio
    test_endpoint "POST" "/condominios" "Criar novo condom√≠nio" \
        '{"nome":"Condom√≠nio Teste Script","endereco":"Rua do Teste, 123","cep":"50000-000","cidade":"Recife","estado":"PE","telefone":"(81)3333-9999","email":"teste@script.com"}'
}

# Fun√ß√£o para executar testes de arm√°rios
test_armarios() {
    print_message $YELLOW "üóÑÔ∏è === TESTES DE ARM√ÅRIOS ==="
    
    # Listar arm√°rios
    test_endpoint "GET" "/armarios" "Listar todos os arm√°rios"
    
    # Listar arm√°rios por condom√≠nio
    test_endpoint "GET" "/armarios/condominio/1" "Listar arm√°rios por condom√≠nio"
    
    # Buscar arm√°rio por ID
    test_endpoint "GET" "/armarios/1" "Buscar arm√°rio por ID"
}

# Fun√ß√£o para executar testes de compartimentos
test_compartimentos() {
    print_message $YELLOW "üì¶ === TESTES DE COMPARTIMENTOS ==="
    
    # Listar compartimentos
    test_endpoint "GET" "/compartimentos" "Listar todos os compartimentos"
    
    # Listar compartimentos por arm√°rio
    test_endpoint "GET" "/compartimentos/armario/1" "Listar compartimentos por arm√°rio"
    
    # Listar compartimentos dispon√≠veis
    test_endpoint "GET" "/compartimentos/status?ocupado=false" "Listar compartimentos dispon√≠veis"
    
    # Buscar compartimento por ID
    test_endpoint "GET" "/compartimentos/1" "Buscar compartimento por ID"
}

# Fun√ß√£o para executar testes de entregas
test_entregas() {
    print_message $YELLOW "üöö === TESTES DE ENTREGAS ==="
    
    # Listar entregas
    test_endpoint "GET" "/entregas" "Listar todas as entregas"
    
    # Listar entregas por status
    test_endpoint "GET" "/entregas/status/ENTREGUE" "Listar entregas por status"
    
    # Criar nova entrega
    test_endpoint "POST" "/entregas" "Registrar nova entrega" \
        '{"codigoRastreio":"SCRIPT123456","observacao":"Entrega teste script","compartimentoId":1,"entregadorId":3,"destinatarioId":2}'
}

# Fun√ß√£o para executar testes de reservas
test_reservas() {
    print_message $YELLOW "üìÖ === TESTES DE RESERVAS ==="
    
    # Listar reservas
    test_endpoint "GET" "/reservas" "Listar todas as reservas"
    
    # Listar reservas por status
    test_endpoint "GET" "/reservas/status/ATIVA" "Listar reservas ativas"
    
    # Criar nova reserva
    test_endpoint "POST" "/reservas" "Criar nova reserva" \
        '{"dataInicio":"2024-02-01T09:00:00","dataFim":"2024-02-01T18:00:00","observacao":"Reserva teste script","compartimentoId":2,"usuarioId":2}'
}

# Fun√ß√£o para executar testes unit√°rios
test_unit_tests() {
    print_message $YELLOW "üî¨ === TESTES UNIT√ÅRIOS ==="
    
    print_message $BLUE "üß™ Executando testes unit√°rios..."
    if ./mvnw test -q; then
        print_message $GREEN "‚úÖ Testes unit√°rios passaram"
    else
        print_message $RED "‚ùå Alguns testes unit√°rios falharam"
        return 1
    fi
}

# Fun√ß√£o para gerar relat√≥rio de cobertura
generate_coverage_report() {
    print_message $YELLOW "üìä === RELAT√ìRIO DE COBERTURA ==="
    
    print_message $BLUE "üìà Gerando relat√≥rio de cobertura..."
    if ./mvnw jacoco:report -q; then
        print_message $GREEN "‚úÖ Relat√≥rio de cobertura gerado"
        print_message $BLUE "üìÅ Relat√≥rio dispon√≠vel em: target/site/jacoco/index.html"
    else
        print_message $RED "‚ùå Falha ao gerar relat√≥rio de cobertura"
        return 1
    fi
}

# Fun√ß√£o para teste de performance b√°sico
test_performance() {
    print_message $YELLOW "‚ö° === TESTE DE PERFORMANCE ==="
    
    print_message $BLUE "‚è±Ô∏è Testando tempo de resposta..."
    
    local start_time=$(date +%s%N)
    test_endpoint "GET" "/usuarios" "Teste de performance - Listar usu√°rios"
    local end_time=$(date +%s%N)
    
    local duration=$(( (end_time - start_time) / 1000000 ))
    
    if [ $duration -lt 2000 ]; then
        print_message $GREEN "‚úÖ Tempo de resposta: ${duration}ms (< 2s)"
    else
        print_message $YELLOW "‚ö†Ô∏è Tempo de resposta: ${duration}ms (> 2s)"
    fi
}

# Fun√ß√£o para executar teste de carga b√°sico
test_load() {
    print_message $YELLOW "üîÑ === TESTE DE CARGA ==="
    
    print_message $BLUE "üîÑ Executando 10 requisi√ß√µes simult√¢neas..."
    
    local success_count=0
    local total_requests=10
    
    for i in $(seq 1 $total_requests); do
        if test_endpoint "GET" "/usuarios" "Requisi√ß√£o $i" "" 200 > /dev/null 2>&1; then
            ((success_count++))
        fi &
    done
    
    wait
    
    print_message $GREEN "‚úÖ $success_count/$total_requests requisi√ß√µes bem-sucedidas"
    
    if [ $success_count -eq $total_requests ]; then
        print_message $GREEN "‚úÖ Teste de carga passou"
    else
        print_message $YELLOW "‚ö†Ô∏è Algumas requisi√ß√µes falharam no teste de carga"
    fi
}

# Fun√ß√£o principal
main() {
    print_message $BLUE "üöÄ === INICIANDO TESTES AUTOMATIZADOS ==="
    print_message $BLUE "üìÖ Data: $(date)"
    echo ""
    
    local failed_tests=0
    
    # Verificar aplica√ß√£o
    check_application
    
    # Obter token
    get_auth_token
    
    # Executar testes por categoria
    if [ "$1" = "unit" ]; then
        test_unit_tests || ((failed_tests++))
    elif [ "$1" = "api" ]; then
        test_authentication || ((failed_tests++))
        test_usuarios || ((failed_tests++))
        test_condominios || ((failed_tests++))
        test_armarios || ((failed_tests++))
        test_compartimentos || ((failed_tests++))
        test_entregas || ((failed_tests++))
        test_reservas || ((failed_tests++))
    elif [ "$1" = "performance" ]; then
        test_performance || ((failed_tests++))
        test_load || ((failed_tests++))
    elif [ "$1" = "coverage" ]; then
        test_unit_tests || ((failed_tests++))
        generate_coverage_report || ((failed_tests++))
    else
        # Executar todos os testes
        test_authentication || ((failed_tests++))
        test_usuarios || ((failed_tests++))
        test_condominios || ((failed_tests++))
        test_armarios || ((failed_tests++))
        test_compartimentos || ((failed_tests++))
        test_entregas || ((failed_tests++))
        test_reservas || ((failed_tests++))
        test_performance || ((failed_tests++))
        test_unit_tests || ((failed_tests++))
    fi
    
    echo ""
    print_message $BLUE "üìä === RESUMO DOS TESTES ==="
    
    if [ $failed_tests -eq 0 ]; then
        print_message $GREEN "üéâ Todos os testes passaram com sucesso!"
        exit 0
    else
        print_message $RED "‚ùå $failed_tests categoria(s) de teste falharam"
        exit 1
    fi
}

# Fun√ß√£o de ajuda
show_help() {
    echo "üß™ Script de Teste Automatizado - Arm√°rio Inteligente"
    echo ""
    echo "Uso: $0 [OP√á√ÉO]"
    echo ""
    echo "Op√ß√µes:"
    echo "  (sem op√ß√£o)  Executar todos os testes"
    echo "  unit         Executar apenas testes unit√°rios"
    echo "  api          Executar apenas testes de API"
    echo "  performance  Executar apenas testes de performance"
    echo "  coverage     Executar testes e gerar relat√≥rio de cobertura"
    echo "  help         Mostrar esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0                    # Executar todos os testes"
    echo "  $0 api               # Executar apenas testes de API"
    echo "  $0 unit              # Executar apenas testes unit√°rios"
    echo "  $0 performance       # Executar testes de performance"
    echo "  $0 coverage          # Gerar relat√≥rio de cobertura"
}

# Verificar argumentos
if [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

# Executar fun√ß√£o principal
main "$1"
